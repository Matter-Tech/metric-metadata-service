networks:
  network:
    name: network

services:

  base-builder:
    # Base Docker Image
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: metric-metadata-service-base-image:latest

  postgres:
    # Database
    image: postgres
    ports:
      - 5432:5432
    env_file:
      - ../env/compose.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username metric_metadata_service_db_user --dbname metric_metadata_service"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network

  redis:
    # Cache
    image: redis
    ports:
      - 6379:6379
    env_file:
      - ../env/compose.env
    command: ["redis-server", "--requirepass", "secretPassword"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a secretPassword ping | grep PONG"]
      interval: 1s
      timeout: 2s
      retries: 5
    networks:
      - network

  aws:
    image: localstack/localstack:latest-amd64
    ports:
      - 4566:4566
    env_file:
      - ../env/compose.env
    environment:
      - SERVICES=sqs
      - SQS_ENDPOINT_STRATEGY=path
    healthcheck:
      test: ["CMD-SHELL", "awslocal sqs list-queues"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ../tests/resources/localstack:/docker-entrypoint-initaws.d
    networks:
      - network

  # Application base
  metric-metadata-service-base:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: metric-metadata-service-development:latest
    env_file:
      - ../env/compose.env
    volumes:
      - ../src/app:${PROJECT_BASE_PATH_IN_CONTAINER}/app
      - ../src/alembic:${PROJECT_BASE_PATH_IN_CONTAINER}/alembic
      - ../src/alembic.ini:${PROJECT_BASE_PATH_IN_CONTAINER}/alembic.ini
      - ../src/cli.sh:${PROJECT_BASE_PATH_IN_CONTAINER}/cli.sh
    networks:
      - network

  metric-metadata-service:
    extends:
      service: metric-metadata-service-base
    ports:
      - 8080:8080
    environment:
      - INSTANCE_NAME=metric-metadata-service
    depends_on: &app-dependencies
      redis:
        condition: service_healthy
      aws:
        condition: service_healthy
      postgres:
        condition: service_healthy
